<?php

/**
 * @file
 * Hooks and helper functions to build the audiophreak vimeo tracking system.
 */

 
 //Bring preprocess_page into module instead of theme
 
 
 
 /**
  * Implements hook_block_info().
  */
  
function my_db_module_block_info() {
  $blocks['progress'] = array(
    // info: The name of the block.
    'info' => t('progress'),
  );

  return $blocks;
}
  
  /**
   * Implements hook_block_view().
   */
function my_db_module_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'progress':
      // Create your block content here
      $block['subject'] = t('Title of first block (example_configurable_text)');
      //Have block pull NID, UID, PROGRESS from table and display whether this user has completed this video for this node
       $block['content'] = 'hello';
              //Query the database progress field. if this nid is 100% complete, say so.
              // if ($progress == 5050) {
//                 
                // //query this nid - this nid is complete
                // echo ' <br /> This video is 100% complete.';
              // } else {
                // //query this node.. if incomplete
                // echo '<br /> Course marked as incomplete. Please watch the course start at 00:00 - Thank you.';
              // }
      // break;
  }
  return $block;
}

  

 
/**
 * Implements hook_node_view().
 */
function my_db_module_node_view($node, $view_mode, $langcode) {

  // Add content type specific JS on full page node view
  if($view_mode == 'full'){
    switch($node->type) {
      case 'video':
        // Grab the user's information and store in variables
        $account = $GLOBALS['user']->uid;
        $nodeId = $node->nid;
        // Allow the variables to be accessed in javascript.
        drupal_add_js(array('my_db_module' => array('account' => $account)), 'setting');
        drupal_add_js(array('my_db_module' => array('nodeId' => $nodeId)), 'setting');
      break;
    }
  }

}

/**
* Implementation of hook_menu().
*/
function my_db_module_menu() {
  $items['callback'] = array(
    'title' => 'My callback',
    'description' => 'Desc',
    'page callback' => 'mymodule_getinfo',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}


/**
 * My callback
 */
function mymodule_getinfo() {
  if(isset($_POST['data']) && !empty($_POST['data'])) {
//Make stats string
        // $stats = json_encode($_POST['data']);
        $stats = $_POST['data'];
//Make uid int
        $usid = intval($_POST['uid']); //int uid
//Make nid int
        $noid = intval($_POST['nid']); //int nid
        
        
//Serialize1 is a serialized array for the initial database storage
        // $serialize1 = serialize($stats);
        $serialize1 = serialize($_POST['data']);
//Arr 2 is stats array in db
        $retrieve = db_query('SELECT stats FROM {my_db} WHERE uid = :uid AND nid = :nid', array(':uid' => $usid, ':nid' => $noid))->fetchCol();
        
        
//Select progress boolean from db
        $prog = db_query("SELECT progress FROM {my_db} WHERE uid = :uid AND nid = :nid", array(':uid' => $usid, ':nid' => $noid))->fetchField(); 

//Select entire row for uid/nid in db
        $results = db_query('SELECT * FROM {my_db} WHERE uid = :uid AND nid = :nid', array(':uid' => $usid, ':nid' => $noid))->fetchObject();
   
   
//If results and prog = 1 break
   if ($results && $prog != 0) {
     echo 'course complete';
   } //If results exists and prog = 0, then update 
   else if($results && $prog == 0) {
     
      // print_r($retrieve[0]);
     // var_dump($retrieve[0]);
     // echo $retrieve . '<BR />END RETRIEVE <br />';
     
     $array1 = unserialize($retrieve[0]);
     // $array12 = json_decode($array1); // THE DATABASE
     
     print_r($array1);
     var_dump($array1);
     echo $array1 . '<BR />END ARRAY1 <br />';
     // print_r($array12);
     // var_dump($array12);
     // echo $array12 . '<BR />END ARRAY12 <br />';
     print_r($stats);
     var_dump($stats);
     echo $stats . '<BR />END STATS<BR />';
      // $array13 = json_decode($stats); // JSON DECODE STATS
      // print_r($array13);
     // var_dump($array13);
     // echo $array13 . '<BR />END JSON DECODE STATS <BR />';
     
     
     // $thearray = array();
     // foreach($array12 as $val) {
          // echo $val . 'VALUE<BR />';
          // array_push($thearray, $val);
        // }
//      
      // print_r($thearray);
     // var_dump($thearray);
     // echo $thearray . '<BR />END THE ARRAY<BR />';

     
      //merge post data and stored data
      $merge = array_merge($array1, $stats);
            
       print_r($merge);
       var_dump($merge);
       echo $stats . '<BR />AFTER MERGED <BR />';

      //remove duplicates
      $merge = array_unique($merge);
      
       print_r($merge);
       var_dump($merge);
       echo $stats . '<BR />AFTER UNIQUE <BR />';
      
      //update with a serialized array
      $array3 = serialize($merge);
      
      print_r($array3);
       var_dump($array3);
       echo $array3 . '<BR />ARRAY 3 SERIALIZED MERGE <BR />';
      
      
      $update = db_update('my_db')
        ->fields(array(
          'stats' => $array3,
        ))
          ->condition('nid', $noid, '=')
          ->condition('uid', $usid, '=')
        ->execute();
        

        
//begin checking user progress now that we have logged stats
      
      //create empty array to hold integer array from merged string array(s)
      $parse = array();
        foreach ($merge as &$value) {
          $cleaned = intval($value);
          array_push($parse, $cleaned);
        }
      
      //create counter
      $total = 0;
        foreach ($parse as &$value) {
          $total +=  $value;
          echo $total .'<br>';
        }

        //If video complete 100%
        if ($total == 5050) {
          
          //overwrite 0 to 1 in progress
          $insert = db_update('my_db')
        ->fields(array(
          'progress' => 1,
        )) //only on this row
          ->condition('nid', $noid, '=')
          ->condition('uid', $usid, '=')
        ->execute();
          echo ' <br /> This video is 100% complete.';
        } else { // else do nothing
          echo ' <br /> This video is incomplete.';
        }
    } else {
      
      //write a new insert query
      $new = db_insert('my_db')
      ->fields(array(
        'nid' => $noid,
        'uid' => $usid,
        'stats' => $serialize1,
      ))->execute();
        
//begin checking user progress now that we have logged stats in new row
      
      //create empty array to hold integer array from merged string array(s)
      $parse = array();
      $unserialized = unserialize($retrieve);
        foreach ($unserialized as &$value) {
          $cleaned = intval($value);
          array_push($parse, $cleaned);
        }
      
      //create counter
      $total = 0;
        foreach ($parse as &$value) {
          $total +=  $value;
          echo $total .'<br>';
        }

        //If video complete 100%
        if ($total == 5050) {
          
          //overwrite 0 to 1 in progress
          $insert = db_update('my_db')
        ->fields(array(
          'progress' => 1,
        )) //only on this row
          ->condition('nid', $noid, '=')
          ->condition('uid', $usid, '=')
        ->execute();
          echo ' <br /> This video is 100% complete.';
        } else { // else do nothing
          echo ' <br /> This video is incomplete.';
        }
    }//end else
  }//end isset
}//end hook
